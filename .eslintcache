[{"D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\components\\ContactTable\\ContactTable.jsx":"1","D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\redux\\contacts\\selectors.js":"2","D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\index.js":"3","D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\redux\\authorization\\reducer.js":"4"},{"size":5516,"mtime":1623696034325,"results":"5","hashOfConfig":"6"},{"size":516,"mtime":1626790201646,"results":"7","hashOfConfig":"6"},{"size":1041,"mtime":1651603449986,"results":"8","hashOfConfig":"6"},{"size":435,"mtime":1623761319832,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"4t3su8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\components\\ContactTable\\ContactTable.jsx",["20","21"],"import { useSelector, useDispatch } from 'react-redux';\nimport { useState, createRef } from 'react';\n\nimport style from './ContactTable.module.css';\nimport {\n  handleCheckUniqueContact,\n  checkInputUpdate,\n} from '../../validation.js/validation';\nimport {\n  getVisibleContactsMemo,\n  getFilter,\n} from '../../redux/contacts/selectors';\nimport {\n  asyncOperationRemoveContact,\n  asyncOperationUpdateContact,\n} from '../../redux/contacts/operations';\n\nconst myRef = createRef();\n\nconst ContactTable = () => {\n  const visibleContacts = useSelector(getVisibleContactsMemo);\n  const filter = useSelector(getFilter);\n  const [id, setId] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const onRemove = async idUp => {\n    if (id && id !== idUp) return;\n    myRef.current = null;\n    setIsOpen(false);\n    setId('');\n    dispatch(await asyncOperationRemoveContact(idUp));\n  };\n\n  const onOpenUpdate = async (idUp, i, theContact) => {\n    if (filter !== '') return;\n    if (id && id !== idUp) return;\n\n    const tdName = document.getElementById(i + 'td-name');\n    const tdNumber = document.getElementById(i + 'td-number');\n    const tdUpdateAll = document.getElementsByClassName(style.contact_update);\n    const tdDeleteAll = document.getElementsByClassName(style.contact_delete);\n    const checkInputName = document.getElementById(i + 'first');\n    const checkInputNumber = document.getElementById(i + 'second');\n\n    if (checkInputName && checkInputNumber) {\n      myRef.current = {\n        inputName: checkInputName,\n        inputNumber: checkInputNumber,\n      };\n    }\n\n    const { inputName, inputNumber } = myRef.current;\n    const name = inputName.value;\n    const number = inputNumber.value;\n    const contact = { name, number };\n    const arrayBtn = [...Array.from(tdUpdateAll), ...Array.from(tdDeleteAll)];\n\n    if (!checkInputName && !checkInputNumber) {\n      tdName.append(inputName);\n      tdNumber.append(inputNumber);\n    }\n\n    setId(idUp);\n    let check = isOpen;\n    check = !check;\n    setIsOpen(check);\n    if (check) {\n      arrayBtn.map(el => {\n        if (el.id === i + 'td-update') {\n          el.style.backgroundColor = 'rgb(247, 171, 7)';\n          el.textContent = 'Done';\n          return null;\n        }\n        el.style.pointerEvents = 'none';\n      });\n      inputName.classList.remove(style.input_hidden);\n      inputNumber.classList.remove(style.input_hidden);\n      inputName.classList.add(style.input_active);\n      inputNumber.classList.add(style.input_active);\n    }\n    if (!check) {\n      try {\n        const isValid = await checkInputUpdate(contact);\n        if (!isValid) return setIsOpen(check);\n      } catch (err) {\n        console.log(err);\n      }\n      const { theName, theNumber } = theContact;\n      if (theName === name && theNumber !== number) {\n        const isExistContact = handleCheckUniqueContact(\n          visibleContacts,\n          name,\n          number,\n          false,\n          true,\n        );\n        setIsOpen(check);\n        if (!isExistContact) return;\n      }\n      if (theName !== name && theNumber === number) {\n        handleCheckUniqueContact(visibleContacts, name, number, true, false);\n      }\n      if (theName !== name && theNumber !== number) {\n        const isExistContact = handleCheckUniqueContact(\n          visibleContacts,\n          name,\n          number,\n        );\n        setIsOpen(check);\n        if (!isExistContact) return;\n      }\n      arrayBtn.map(el => {\n        if (el.id === i + 'td-update') {\n          el.style.backgroundColor = 'rgb(12, 247, 63)';\n          el.textContent = 'Update';\n        }\n        el.style.pointerEvents = '';\n      });\n      dispatch(await asyncOperationUpdateContact(idUp, contact));\n      inputName.classList.remove(style.input_active);\n      inputNumber.classList.remove(style.input_active);\n      inputName.classList.add(style.input_hidden);\n      inputNumber.classList.add(style.input_hidden);\n      myRef.current = null;\n      setId(null);\n    }\n  };\n\n  return visibleContacts.length !== 0 ? (\n    <table className={style.contact_table}>\n      <tbody>\n        {visibleContacts.map(({ id, name, number }, i) => {\n          return (\n            <tr className={style.contact_tbody_tr} key={i}>\n              <td id={i + 'td-name'} className={style.contact_name}>\n                {name}\n                <input\n                  id={i + 'first'}\n                  className={style.input_hidden}\n                  type=\"text\"\n                  defaultValue={name}\n                ></input>\n              </td>\n              <td id={i + 'td-number'} className={style.contact_number}>\n                {number}\n                <input\n                  id={i + 'second'}\n                  className={style.input_hidden}\n                  type=\"tel\"\n                  defaultValue={number}\n                ></input>\n              </td>\n              <td\n                id={i + 'td-update'}\n                className={style.contact_update}\n                onClick={() =>\n                  onOpenUpdate(id, i, { theName: name, theNumber: number })\n                }\n              >\n                Update\n              </td>\n              <td\n                id={i + 'td-delete'}\n                className={style.contact_delete}\n                onClick={() => onRemove(id)}\n              >\n                Delete\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  ) : null;\n};\n\nexport default ContactTable;\n",["22","23"],"D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\redux\\contacts\\selectors.js",[],"D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\index.js",[],"D:\\web\\REACT\\goit-react-hw-08-phonebook\\src\\redux\\authorization\\reducer.js",[],{"ruleId":"24","severity":1,"message":"25","line":69,"column":23,"nodeType":"26","messageId":"27","endLine":69,"endColumn":25},{"ruleId":"24","severity":1,"message":"28","line":113,"column":23,"nodeType":"26","messageId":"29","endLine":113,"endColumn":25},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-global-assign","no-unsafe-negation"]